name: AI Patch PR (mbox, three-way)

on:
  workflow_dispatch:
    inputs:
      base_ref:
        description: "Base commit/branch/SHA the patch is based on"
        required: false
        default: "main"
      patch_mbox_b64:
        description: "Base64 of a single-commit mbox patch (git format-patch --stdout)"
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  apply-and-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base_ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.base_ref || 'main' }}
          fetch-depth: 0

      - name: Configure Git (line endings + identity)
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git status --porcelain=v1

      - name: Decode mbox patch
        id: decode
        env:
          PATCH_B64: ${{ github.event.inputs.patch_mbox_b64 }}
        run: |
          set -e
          python - << 'PY'
          import base64, os
          b64 = os.environ['PATCH_B64']
          with open('ai.patch','wb') as f:
              f.write(base64.b64decode(b64))
          print("Decoded ai.patch")
          PY

      - name: Normalize mbox newlines (CRLF â†’ LF) without changing bytes otherwise
        run: |
          set -e
          python - << 'PY'
          p = 'ai.patch'
          with open(p,'rb') as f:
            data = f.read()
          data = data.replace(b'\r\n', b'\n')
          with open(p,'wb') as f:
            f.write(data)
          PY

      - name: Show patch info (size, header, diff markers)
        run: |
          set -e
          echo "== file info =="
          ls -l ai.patch || true
          echo "== first 40 lines =="
          sed -n '1,40p' ai.patch || true
          echo "== diff markers =="
          grep -nE '^diff --git ' ai.patch || true
          echo "== subject line(s) =="
          grep -nE '^Subject: ' ai.patch || true

      - name: Upload decoded patch (pre-apply)
        uses: actions/upload-artifact@v4
        with:
          name: decoded-ai-patch
          path: ai.patch
          if-no-files-found: error

      - name: Create working branch
        id: prep
        run: |
          set -e
          BRANCH="ai/patch-${{ github.run_id }}"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          git switch -c "$BRANCH"

      - name: Apply patch with three-way merge (file mode)
        id: apply
        run: |
          set -e
          if ! git am -3 --keep-cr ai.patch ; then
            echo "git am failed; capturing rejects/artifacts"
            echo "am_failed=true" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload rejects on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: patch-rejects-and-state
          path: |
            *.rej
            **/*.rej
            .git/rebase-apply/
            .git/REBASE_APPLY/
          if-no-files-found: warn

      - name: Abort failed am
        if: failure()
        run: |
          git am --abort || true

      - name: Push branch
        if: success()
        run: |
          git push --set-upstream origin "${{ steps.prep.outputs.branch }}"

      - name: Create Pull Request into main
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const base = 'main';
            const head = '${{ steps.prep.outputs.branch }}';
            const title = `AI patch PR from run ${context.runId}`;
            const body = [
              'Automated PR created from mbox patch via `git am -3`.',
              `Base ref used for checkout: \`${{ github.event.inputs.base_ref || 'main' }}\``,
              `Run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            ].join('\n');
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              head,
              base,
              body,
              maintainer_can_modify: true
            });
            core.info(`Created PR #${pr.number}`);
